---
import '@fontsource/space-mono';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/png" href="https://bh3gei.github.io/avatar.png" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>YAO's Links</title>
		<style>
			:root {
				--accent: 136, 58, 234;
				--accent-light: 224, 204, 250;
			}
			
			body {
				font-family: 'Space Mono', monospace;
				margin: 0;
				background: #0f0f23;
				color: #fff;
				overflow-x: hidden;
				overflow-y: auto;
				height: 100vh;
			}

			/* Ëá™ÂÆö‰πâÊªöÂä®Êù°Ê†∑Âºè */
			::-webkit-scrollbar {
				width: 10px;
				height: 10px;
			}

			::-webkit-scrollbar-track {
				background: rgba(255, 255, 255, 0.05);
				border-radius: 5px;
			}

			::-webkit-scrollbar-thumb {
				background: rgba(var(--accent), 0.3);
				border-radius: 5px;
				transition: all 0.3s ease;
			}

			::-webkit-scrollbar-thumb:hover {
				background: rgba(var(--accent), 0.5);
			}

			/* Firefox ÊªöÂä®Êù°Ê†∑Âºè */
			* {
				scrollbar-width: thin;
				scrollbar-color: rgba(var(--accent), 0.3) rgba(255, 255, 255, 0.05);
			}

			#stars-container {
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				z-index: -1;
				background: radial-gradient(circle at center, #1b1b2f 0%, #0f0f23 100%);
				overflow: hidden;
			}

			#stars-container::before,
			#stars-container::after {
				content: "";
				position: absolute;
				top: -2px;
				left: -2px;
				width: calc(100% + 4px);
				height: calc(100% + 4px);
				background-repeat: repeat;
				animation: animateStars 50s linear infinite;
			}

			#stars-container::before {
				background-image: 
					radial-gradient(1px 1px at 25% 25%, white 100%, transparent),
					radial-gradient(1px 1px at 50% 50%, white 100%, transparent),
					radial-gradient(2px 2px at 75% 75%, white 100%, transparent),
					radial-gradient(2px 2px at 25% 75%, white 100%, transparent),
					radial-gradient(1px 1px at 75% 25%, white 100%, transparent),
					radial-gradient(2px 2px at 50% 25%, white 100%, transparent),
					radial-gradient(1px 1px at 25% 50%, white 100%, transparent);
				background-size: 200px 200px, 170px 170px, 150px 150px, 130px 130px, 110px 110px, 90px 90px, 70px 70px;
				animation-direction: normal;
			}

			#stars-container::after {
				background-image: 
					radial-gradient(1px 1px at 25% 25%, white 100%, transparent),
					radial-gradient(1px 1px at 50% 50%, white 100%, transparent),
					radial-gradient(2px 2px at 75% 75%, white 100%, transparent),
					radial-gradient(2px 2px at 25% 75%, white 100%, transparent),
					radial-gradient(1px 1px at 75% 25%, white 100%, transparent);
				background-size: 150px 150px, 130px 130px, 100px 100px, 80px 80px, 60px 60px;
				animation-delay: -25s;
				opacity: 0.4;
			}

			@keyframes animateStars {
				from {
					transform: translateY(0);
				}
				to {
					transform: translateY(-100%);
				}
			}

			.shooting-star {
				position: absolute;
				width: 2px;
				height: 2px;
				background: white;
				border-radius: 50%;
				box-shadow: 0 0 4px 2px rgba(255, 255, 255, 0.3);
				opacity: 0;
				animation: shootingStar 5s linear infinite;
			}

			@keyframes shootingStar {
				0% {
					transform: translate(120vw, -20vh) rotate(45deg);
					opacity: 0;
				}
				2% {
					opacity: 1;
				}
				20% {
					transform: translate(-20vw, 120vh) rotate(45deg);
					opacity: 0;
				}
				100% {
					transform: translate(-20vw, 120vh) rotate(45deg);
					opacity: 0;
				}
			}

			.container {
				max-width: 800px;
				margin: 0 auto;
				padding: 2rem;
				position: relative;
				z-index: 1;
				min-height: calc(100vh - 4rem);
				display: flex;
				flex-direction: column;
				justify-content: flex-start;
				padding-top: 100px;
				overflow-y: auto;
			}

			h1 {
				font-size: 2.5rem;
				text-align: center;
				margin-bottom: 3rem;
				color: #fff;
				text-shadow: 0 0 10px rgba(var(--accent), 0.5);
				animation: title-glow 2s ease-in-out infinite alternate;
			}

			@keyframes title-glow {
				from { text-shadow: 0 0 10px rgba(var(--accent), 0.5); }
				to { text-shadow: 0 0 20px rgba(var(--accent-light), 0.7); }
			}

			.links-list {
				list-style: none;
				padding: 0;
				margin: 0;
				display: grid;
				grid-template-columns: repeat(2, 1fr);
				gap: 1rem;
			}

			.link-item {
				margin: 0;
				transition: all 0.3s ease;
				opacity: 0;
				transform: translateY(20px);
				animation: fade-in 0.5s ease forwards;
			}

			.link-item:hover {
				transform: translateX(10px) scale(1.02);
			}

			@keyframes fade-in {
				to {
					opacity: 1;
					transform: translateY(0);
				}
			}

			.link {
				display: flex;
				align-items: center;
				padding: 1rem;
				color: #fff;
				text-decoration: none;
				background: rgba(255, 255, 255, 0.05);
				backdrop-filter: blur(10px);
				border-radius: 8px;
				border: 1px solid rgba(var(--accent), 0.1);
				box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
				transition: all 0.3s ease;
			}

			.link:hover {
				background: rgba(var(--accent), 0.1);
				border-color: rgba(var(--accent), 0.3);
				box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);
			}

			.link-icon {
				font-size: 1.5rem;
				margin-right: 1rem;
				min-width: 2rem;
				text-align: center;
			}

			.link-name {
				font-size: 1.1rem;
			}

			.duckduckgo-btn {
				position: fixed;
				top: 20px;
				right: 20px;
				padding: 10px 20px;
				background: rgba(255, 255, 255, 0.1);
				border: 1px solid rgba(var(--accent), 0.3);
				border-radius: 8px;
				color: #fff;
				text-decoration: none;
				backdrop-filter: blur(10px);
				transition: all 0.3s ease;
				z-index: 10;
			}

			.duckduckgo-btn:hover {
				background: rgba(var(--accent), 0.2);
				transform: translateY(-2px);
				box-shadow: 0 4px 12px rgba(var(--accent), 0.2);
			}

			.search-container {
				position: fixed;
				top: 20px;
				right: 20px;
				z-index: 10;
			}

			.search-input-container {
				position: relative;
			}

			.search-input {
				padding: 10px 15px;
				padding-right: 40px;
				background: rgba(255, 255, 255, 0.1);
				border: 1px solid rgba(var(--accent), 0.3);
				border-radius: 8px;
				color: #fff;
				font-family: 'Space Mono', monospace;
				backdrop-filter: blur(10px);
				transition: all 0.3s ease;
				width: 200px;
			}

			.search-input:focus {
				outline: none;
				background: rgba(var(--accent), 0.1);
				border-color: rgba(var(--accent), 0.5);
				box-shadow: 0 0 15px rgba(var(--accent), 0.2);
				width: 250px;
			}

			.search-icon {
				position: absolute;
				right: 12px;
				top: 50%;
				transform: translateY(-50%);
				cursor: pointer;
				opacity: 0.7;
				transition: all 0.3s ease;
			}

			.search-icon:hover {
				opacity: 1;
				transform: translateY(-50%) scale(1.1);
			}

			.search-engines {
				position: absolute;
				top: 100%;
				right: 0;
				margin-top: 8px;
				background: rgba(255, 255, 255, 0.1);
				backdrop-filter: blur(10px);
				border: 1px solid rgba(var(--accent), 0.3);
				border-radius: 8px;
				padding: 8px;
				display: none;
				flex-direction: column;
				gap: 4px;
				min-width: 150px;
			}

			.search-engines.show {
				display: flex;
			}

			.engine-btn {
				padding: 8px 12px;
				color: #fff;
				background: transparent;
				border: none;
				border-radius: 4px;
				cursor: pointer;
				text-align: left;
				font-family: 'Space Mono', monospace;
				display: flex;
				align-items: center;
				gap: 8px;
				transition: all 0.3s ease;
			}

			.engine-btn:hover {
				background: rgba(var(--accent), 0.2);
			}

			.hidden {
				display: none !important;
			}

			@media (max-width: 600px) {
				.container {
					padding: 1rem;
				}

				h1 {
					font-size: 2rem;
				}

				.links-list {
					grid-template-columns: 1fr;
				}
			}
		</style>
	</head>
	<body>
		<div id="stars-container">
			<div class="shooting-star" style="animation-delay: 0s"></div>
			<div class="shooting-star" style="animation-delay: 2s"></div>
			<div class="shooting-star" style="animation-delay: 4s"></div>
		</div>
		<div class="search-container">
			<div class="search-input-container">
				<input type="text" class="search-input" placeholder="Search links..." id="searchInput">
				<span class="search-icon" id="searchIcon">üîç</span>
				<div class="search-engines" id="searchEngines">
					<button class="engine-btn" data-url="https://www.google.com/search?q=">
						<span>üîç</span> Google
					</button>
					<button class="engine-btn" data-url="https://www.ecosia.org/search?q=">
						<span>üå≥</span> Ecosia
					</button>
					<button class="engine-btn" data-url="https://duckduckgo.com/?q=">
						<span>ü¶Ü</span> DuckDuckGo
					</button>
					<button class="engine-btn" data-url="https://www.bing.com/search?q=">
						<span>üîé</span> Bing
					</button>
				</div>
			</div>
		</div>
		<div class="container">
			<h1>YAO's Links</h1>
			<ul class="links-list">
				<!-- Links will be loaded by JavaScript -->
			</ul>
		</div>

		<script>
			async function fetchLinks() {
				const LINKS_URL = 'https://raw.githubusercontent.com/BH3GEI/Resume/main/all_links.md';
				try {
					const response = await fetch(LINKS_URL);
					const content = await response.text();
					return content.split('\n')
						.filter(line => line.trim())
						.map(line => {
							const matches = line.match(/\[(.*?)\]\[(.*?)\]\s*(\[.*?\])?/);
							if (matches) {
								return {
									name: matches[1],
									url: matches[2],
									icon: matches[3]?.replace(/[\[\]]/g, '') || ''
								};
							}
							return null;
						})
						.filter(Boolean);
				} catch (error) {
					console.error('Error fetching links:', error);
					return [];
				}
			}

			async function updateLinks() {
				const links = await fetchLinks();
				const linksList = document.querySelector('.links-list');
				
				// ‰øùÂ≠òÁé∞ÊúâÁöÑÈìæÊé•ÂÖÉÁ¥†
				const existingLinks = Array.from(linksList.children);
				
				// ÂàõÂª∫Êñ∞ÁöÑÈìæÊé•ÂÖÉÁ¥†
				const newElements = links.map((link, index) => {
					const li = document.createElement('li');
					li.className = 'link-item';
					li.style.animationDelay = `${index * 100}ms`;
					
					const a = document.createElement('a');
					a.href = link.url;
					a.target = '_blank';
					a.rel = 'noopener noreferrer';
					a.className = 'link';
					
					const iconSpan = document.createElement('span');
					iconSpan.className = 'link-icon';
					iconSpan.textContent = link.icon;
					
					const nameSpan = document.createElement('span');
					nameSpan.className = 'link-name';
					nameSpan.textContent = link.name;
					
					a.appendChild(iconSpan);
					a.appendChild(nameSpan);
					li.appendChild(a);
					
					// Ê∑ªÂä†ÁÇπÂáª‰∫ã‰ª∂ÁõëÂê¨Âô®
					a.addEventListener('click', (e) => {
						e.preventDefault();
						window.open(a.href, '_blank');
					});
					
					return li;
				});
				
				// Ê∏ÖÁ©∫ÂàóË°®Âπ∂Ê∑ªÂä†Êñ∞ÂÖÉÁ¥†
				while (linksList.firstChild) {
					linksList.removeChild(linksList.firstChild);
				}
				
				newElements.forEach(element => {
					linksList.appendChild(element);
				});
			}

			// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÁ´ãÂç≥Êõ¥Êñ∞‰∏ÄÊ¨°
			document.addEventListener('DOMContentLoaded', updateLinks);

			// ÊØèÈöî‰∏ÄÂÆöÊó∂Èó¥Ëá™Âä®Êõ¥Êñ∞ (ÊØîÂ¶ÇÊØè5ÂàÜÈíü)
			setInterval(updateLinks, 5 * 60 * 1000);

			const searchInput = document.getElementById('searchInput');
			const searchIcon = document.getElementById('searchIcon');
			const searchEngines = document.getElementById('searchEngines');
			const linkItems = document.querySelectorAll('.link-item');

			// Êú¨Âú∞ÊêúÁ¥¢ÂäüËÉΩ
			function filterLinks(query) {
				query = query.toLowerCase();
				let hasResults = false;
				linkItems.forEach(item => {
					const name = item.querySelector('.link-name').textContent.toLowerCase();
					if (name.includes(query)) {
						item.classList.remove('hidden');
						hasResults = true;
					} else {
						item.classList.add('hidden');
					}
				});
				return hasResults;
			}

			// ËæìÂÖ•Êó∂ÂÆûÊó∂ÊêúÁ¥¢
			searchInput.addEventListener('input', (e) => {
				const query = e.target.value.trim();
				if (query) {
					const hasResults = filterLinks(query);
					if (!hasResults) {
						searchEngines.classList.add('show');
					} else {
						searchEngines.classList.remove('show');
					}
				} else {
					linkItems.forEach(item => item.classList.remove('hidden'));
					searchEngines.classList.remove('show');
				}
			});

			// ÁÇπÂáªÊêúÁ¥¢ÂõæÊ†á
			searchIcon.addEventListener('click', () => {
				const query = searchInput.value.trim();
				if (query) {
					searchEngines.classList.toggle('show');
				}
			});

			// ÁÇπÂáªÊêúÁ¥¢ÂºïÊìé
			document.querySelectorAll('.engine-btn').forEach(btn => {
				btn.addEventListener('click', () => {
					const query = searchInput.value.trim();
					if (query) {
						window.open(btn.dataset.url + encodeURIComponent(query), '_blank');
						searchEngines.classList.remove('show');
					}
				});
			});

			// ÁÇπÂáªÂÖ∂‰ªñÂú∞ÊñπÂÖ≥Èó≠ÊêúÁ¥¢ÂºïÊìéÂàóË°®
			document.addEventListener('click', (e) => {
				if (!e.target.closest('.search-container')) {
					searchEngines.classList.remove('show');
				}
			});

			// ÈìæÊé•Âú®Êñ∞Ê†áÁ≠æÈ°µÊâìÂºÄ
			document.addEventListener('DOMContentLoaded', () => {
				const links = document.querySelectorAll('a[target="_blank"]');
				links.forEach(link => {
					link.addEventListener('click', (e) => {
						e.preventDefault();
						window.open(link.href, '_blank');
					});
				});
			});
		</script>
	</body>
</html>
